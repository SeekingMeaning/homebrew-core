name: GitHub Actions CI
on:
  push:
    branches: master
  pull_request:
env:
  HOMEBREW_DEVELOPER: 1
  HOMEBREW_GITHUB_ACTIONS: 1
  HOMEBREW_NO_AUTO_UPDATE: 1
jobs:
  tap_syntax:
    if: github.repository == 'Homebrew/homebrew-core'
    runs-on: ubuntu-latest
    steps:
    - name: Set up Homebrew
      id: set-up-homebrew
      uses: Homebrew/actions/setup-homebrew@master

    - name: Cache Bundler RubyGems
      uses: actions/cache@v1
      with:
        path: ${{ steps.set-up-homebrew.outputs.gems-path }}
        key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
        restore-keys: ${{ runner.os }}-rubygems-

    - name: Install Bundler RubyGems
      run: brew install-bundler-gems

    - run: brew test-bot --only-tap-syntax

    - name: Check .github/workflows/tests-linux.yml formulae coverage
      run: |
        FILES=$(grep -oE 'Formula/[a-z0-9_\.\-]+' .github/workflows/tests-linux.yml)
        for FILE in $FILES; do
          if [ ! -f "$FILE" ]; then
            echo ".github/workflows/tests-linux.yml is testing a non existing file: $FILE"
            exit 1
          fi
          if [ ! grep -q "depends_on :linux" "$FILE"]; then
            echo "$FILE is not a linux-only formula."
            exit 1
          fi
        done

  tests:
    needs: tap_syntax
    if: github.event_name == 'pull_request' && ! contains(github.event.pull_request.labels.*.name, 'CI-syntax-only')
    strategy:
      matrix:
        version: [10.15, 10.14, 10.13]
      fail-fast: false
    runs-on: ${{ matrix.version }}
    timeout-minutes: 4320
    env:
      PATH: '/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin'
      HOMEBREW_DEVELOPER: 1
      GITHUB_ACTIONS_HOMEBREW_SELF_HOSTED: 1
      GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
    steps:
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - run: brew test-bot --only-cleanup-before

      - run: brew test-bot --only-setup

      - name: Run brew test-bot --only-formulae
        run: |
          mkdir bottles
          cd bottles
          brew test-bot --only-formulae

      - name: Upload brew test-bot --only-formulae failures
        if: always()
        uses: actions/upload-artifact@main
        with:
          name: failures (${{ matrix.version }})
          path: bottles/steps_output.txt

      - name: Output brew test-bot --only-formulae failures
        if: always()
        run: |
          cat bottles/steps_output.txt
          rm bottles/steps_output.txt

      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: logs (${{ matrix.version }})
          path: bottles/logs

      - name: Delete logs and home
        if: always()
        run: |
          rm -rvf bottles/logs
          rm -rvf bottles/home

      - name: Count bottles
        id: bottles
        if: always()
        run: |
          cd bottles
          count=$(ls *.json | wc -l | xargs echo -n)
          echo "$count bottles"
          echo "::set-output name=count::$count"

      - name: Upload bottles
        if: always() && steps.bottles.outputs.count > 0
        uses: actions/upload-artifact@main
        with:
          name: bottles
          path: bottles

      - run: brew test-bot --only-cleanup-after
        if: always()

      - name: Post Cleanup
        if: always()
        run: rm -rvf bottles

  comment:
    needs: tests
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download brew test-bot --only-formulae failures (10.15)
        uses: actions/download-artifact@v2
        with:
          name: failures (10.15)
          path: '10.15'

      - name: Download brew test-bot --only-formulae failures (10.14)
        uses: actions/download-artifact@v2
        with:
          name: failures (10.14)
          path: '10.14'

      - name: Download brew test-bot --only-formulae failures (10.13)
        uses: actions/download-artifact@v2
        with:
          name: failures (10.13)
          path: '10.13'

      - name: Delete brew test-bot --only-formulae failures (10.15)
        uses: geekyeggo/delete-artifact@v1
        with:
          name: failures (10.15)

      - name: Delete brew test-bot --only-formulae failures (10.14)
        uses: geekyeggo/delete-artifact@v1
        with:
          name: failures (10.14)

      - name: Delete brew test-bot --only-formulae failures (10.13)
        uses: geekyeggo/delete-artifact@v1
        with:
          name: failures (10.13)

      - name: Check for failures
        id: check-failures
        run: |
          if grep -q 'Error: [[:digit:]]* failed steps!' */steps_output.txt; then
            echo "::set-output name=tests-failed::true"
          else
            echo "::set-output name=tests-failed::false"
          fi

      - name: Post comment on failure
        if: steps.check-failures.outputs.tests-failed
        uses: Homebrew/actions/post-comment@master
        with:
          token: ${{secrets.HOMEBREW_GITHUB_API_TOKEN}}
          issue: ${{github.event.inputs.pull_request}}
          body: ':warning: @${{github.actor}} tests [failed](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}).'
          bot_body: ':warning: Tests [failed](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}).'
          bot: BrewTestBot

      - name: Dismiss approvals on failure
        if: steps.check-failures.outputs.tests-failed
        uses: Homebrew/actions/dismiss-approvals@master
        with:
          token: ${{secrets.HOMEBREW_GITHUB_API_TOKEN}}
          pr: ${{github.event.inputs.pull_request}}
          message: 'tests failed'
